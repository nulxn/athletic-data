let baseURL="https://www.athletic.net/api/v1/";async function fetchUserData(t,a){return await axios.get(baseURL+`AthleteBio/GetAthleteBioData?athleteId=${t}&sport=${a}&level=16`)}async function processRacers(t,s){var r=[],t=t._source.en.map(async(a,t)=>{var e;void 0!==a.a.ani&&(e=(await fetchUserData(a.a.ani,100<s?"xc":"tf")).data,s<100?e.resultsTF.forEach(t=>{t.EventID==s&&14==t.PersonalBest&&r.push({name:a.a.n,pr:t.Result,school:{name:a.a.t.f,id:a.a.t.ani}})}):e.resultsXC.forEach(t=>{t.Distance==s&&1==t.PersonalBest&&r.push({name:a.a.n,pr:t.Result,school:{name:a.a.t.f,id:a.a.t.ani}})}))});return await Promise.all(t),JSON.stringify({prs:r},null,2)}function timeStringToSeconds(t){var[t,a]=t.replace(/[^\d.:]/g,"").split(":"),[a,e]=a.split(".");return 60*parseInt(t)+parseInt(a)+(e?parseFloat("0."+e):0)}async function sortPRs(t){var a,e,t=JSON.parse(t),s=(t.prs.sort((t,a)=>timeStringToSeconds(t.pr)-timeStringToSeconds(a.pr)),{});for([a,e]of t.prs.entries()){var r,n=e.school.name;s[n]?(s[n].athletes++,s[n].athletes<6&&(s[n].score+=a+1)):(r=(await axios.get(`https://www.athletic.net/api/v1/TeamNav/Team?team=${e.school.id}&sport=xc&season=2024`)).data.team.colors,s[n]={score:a+1,athletes:1,colors:r})}return JSON.stringify({places:s,prs:t.prs},null,2)}